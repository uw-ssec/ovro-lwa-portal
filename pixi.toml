# OVRO-LWA Portal Project Configuration
#
# This pixi.toml file manages dependencies and environments for the OVRO-LWA Portal,
# a Python library for radio astronomy data processing and visualization

[workspace]
# Project metadata and basic configuration
authors = ["University of Washington Scientific Software Engineering Center"] # Project authors
channels = ["conda-forge"] # Conda channels for dependencies
name = "ovro-lwa-portal" # Project name
platforms = ["osx-arm64", "linux-64"] # Supported platforms for development and deployment
version = "0.1.0" # Project version

# The environment configurations for different development scenarios
[environments]
default = { features = ["pre-commit", "gh-cli"], solve-group = "default" } # The default development environment with pre-commit and GitHub CLI
onboard = { features = ["pre-commit", "gh-cli", "onboard"], solve-group = "default" } # The onboarding environment with additional setup tasks

# The main project tasks
[tasks]

# Core dependencies for radio astronomy data processing
[dependencies]
python = "==3.12"
astropy = ">=7.1.0,<8"
xarray = ">=2025.9.1,<2026"
dask = ">=2025.9.1,<2026"
netcdf4 = ">=1.7.2,<2"
zarr = ">=3.1.3,<4"
numcodecs = ">=0.16.1,<0.17"

# Python packages not available in conda-forge
[pypi-dependencies]
# OVRO-LWA specific image plane correction algorithms
# Repository: https://github.com/ovro-lwa/image-plane-correction/tree/nikita/dev
image-plane-correction = { git = "https://github.com/ovro-lwa/image-plane-correction.git", branch = "nikita/dev"}

# Platform-specific dependencies for macOS ARM64
[target.osx-arm64.pypi-dependencies]
# BDSF (Blob Detection and Source Finder) - radio astronomy source finding
# Pre-compiled wheel for Apple Silicon to avoid compilation issues for MacOS 14+
bdsf = {url = "https://files.pythonhosted.org/packages/20/7f/bfd3a4788dd5400cec20d09f83c4d10e7ac486af807c90471917a28afa12/bdsf-1.13.0.post2-cp312-cp312-macosx_14_0_arm64.whl"}

# GitHub CLI feature for interacting with GitHub from the command line
[feature.gh-cli.dependencies]
gh = ">=2.0.0"

# Pre-commit feature for code quality and consistency
[feature.pre-commit.dependencies]
pre-commit = ">=4.3.0"

[feature.pre-commit.tasks]
pre-commit-install = { cmd = "pre-commit install", description = "Install pre-commit hooks in the git repository" }
pre-commit-all = { cmd = "pre-commit run --all-files", description = "Run pre-commit checks on all files" }
pre-commit = { cmd = "pre-commit run", description = "Run pre-commit checks on staged files" }

# Onboarding feature for setting up the development environment
[feature.onboard.pypi-dependencies]
ssec-cli = { git = "https://github.com/uw-ssec/ssec-cli.git" }

[feature.onboard.tasks]
ssec-setup = { cmd = "ssec --install-completion", description = "Set up shell completion for ssec-cli" }
onboard = { cmd = "ssec onboard", description = "Run the onboarding process for the SSEC project", depends-on = [
    "pre-commit-install",
    "ssec-setup",
] }
