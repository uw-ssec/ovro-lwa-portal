[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "ovro_lwa_portal"
dynamic = ["version"]
description = "Python library for radio astronomy data processing and visualization for the Owens Valley Radio Observatory - Long Wavelength Array (OVRO-LWA)"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "astropy>=7.1.0,<8",
    "xarray>=2025.9.1,<2026",
    "dask>=2025.9.1,<2026",
    # Pinned to Zarr v2 for now.
    # See https://github.com/casangi/xradio/issues/355
    "zarr>=2.16,<3",
    "numcodecs>=0.15,<0.16",
    "xradio[all]>=0.0.59,<0.1"
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest>=6",
    "pytest-cov",
    "pytest-xdist",
    "pytest-mock",
]
all = ["ovro_lwa_portal[dev]"]

[project.license]
file = "LICENSE"

[project.urls]
Homepage = "https://github.com/uw-ssec/ovro-lwa-portal"
Repository = "https://github.com/uw-ssec/ovro-lwa-portal.git"
Issues = "https://github.com/uw-ssec/ovro-lwa-portal/issues"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/ovro_lwa_portal/version.py"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.targets.sdist]
exclude = ["/tests"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-vvv", "-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = false
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = ["tests"]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.12"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "ovro_lwa_portal.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.ruff]
exclude = ["tests/**"]
line-length = 100

[tool.ruff.lint]
extend-select = [
    "B",   # flake8-bugbear
    "I",   # isort
    "ARG", # flake8-unused-arguments
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
    "NPY", # NumPy specific rules
    "PD",  # pandas-vet
]
ignore = [
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "ISC001",  # Conflicts with formatter
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]

# Pixi configuration for dependency management
# For more information, see: https://pixi.sh/latest/build/python/
[tool.pixi.workspace]
# Pinned due to https://github.com/prefix-dev/pixi/issues/4723
requires-pixi = ">=0.55.0, <0.56.0"
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64"]

[tool.pixi.dependencies]
python = "3.12.*"
pip = ">=24.0"

[tool.pixi.pypi-dependencies]
ovro_lwa_portal = { path = ".", editable = true }
# OVRO-LWA specific image plane correction algorithms
# Repository: https://github.com/ovro-lwa/image-plane-correction/tree/nikita/dev
image-plane-correction = { git = "https://github.com/ovro-lwa/image-plane-correction.git", branch = "nikita/dev"}

[tool.pixi.target.osx-arm64.pypi-dependencies]
# BDSF (Blob Detection and Source Finder) - radio astronomy source finding
# Pre-compiled wheel for Apple Silicon to avoid compilation issues for MacOS 14+
bdsf = {url = "https://files.pythonhosted.org/packages/20/7f/bfd3a4788dd5400cec20d09f83c4d10e7ac486af807c90471917a28afa12/bdsf-1.13.0.post2-cp312-cp312-macosx_14_0_arm64.whl"}

[tool.pixi.environments]
default = { features = ["pre-commit", "gh-cli"], solve-group = "default" }
onboard = { features = ["pre-commit", "gh-cli", "onboard"], solve-group = "default" }

# GitHub CLI feature for interacting with GitHub from the command line
[tool.pixi.feature.gh-cli.dependencies]
gh = ">=2.0.0"

# Pre-commit feature for code quality and consistency
[tool.pixi.feature.pre-commit.dependencies]
pre-commit = ">=4.3.0"
pytest = ">=6"
pytest-cov = ">=3.0.0"

[tool.pixi.feature.pre-commit.tasks]
pre-commit-install = { cmd = "pre-commit install", description = "Install pre-commit hooks in the git repository" }
pre-commit-all = { cmd = "pre-commit run --all-files", description = "Run pre-commit checks on all files" }
pre-commit = { cmd = "pre-commit run", description = "Run pre-commit checks on staged files" }

# Onboarding feature for setting up the development environment
[tool.pixi.feature.onboard.pypi-dependencies]
ssec-cli = { git = "https://github.com/uw-ssec/ssec-cli.git" }

[tool.pixi.feature.onboard.tasks]
ssec-setup = { cmd = "ssec --install-completion", description = "Set up shell completion for ssec-cli" }
onboard = { cmd = "ssec onboard", description = "Run the onboarding process for the SSEC project", depends-on = [
    "pre-commit-install",
    "ssec-setup",
] }
